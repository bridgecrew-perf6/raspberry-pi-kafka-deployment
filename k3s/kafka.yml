apiVersion: v1
kind: Service
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  type: NodePort
  ports:
    - port: 9092
      nodePort: 30092
      name: client
  selector:
    app: kafka
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: kafka-pdb
spec:
  selector:
    matchLabels:
      app: kafka
  maxUnavailable: 1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  selector:
    matchLabels:
      app: kafka
  serviceName: kafka
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        app: kafka
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                      - kafka
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: kubernetes-kafka
          imagePullPolicy: Always
          image: "leonardorocha1990/pi-kafka:1.0.0-SNAPSHOT"
          env:
            - name: KAFKA_ADVERTISED_HOST_NAME
              value: "kafka.default"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zk-cs.default:2181"
          resources:
            requests:
              memory: "1Gi"
              cpu: "0.5"
          ports:
            - containerPort: 9092
              name: client
          command:
            - sh
            - -c
            - "tail -f /dev/null"
          volumeMounts:
            - name: datadir
              mountPath: /kafka
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 10Gi